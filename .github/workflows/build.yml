name: Build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        sys: [mingw64, ucrt64, clang64]
        mode: [dynamic, static]
        include:
          - os: windows-11-arm
            sys: clangarm64
            mode: dynamic
          - os: windows-11-arm
            sys: clangarm64
            mode: static
    runs-on: ${{ matrix.os }}
    env:
      dynamic_flags: '--enable-gtk'
      static_flags: '--disable-gtk --disable-spice --disable-usb-redir --disable-smartcard --disable-gnutls --disable-libssh --disable-vnc-sasl --static'
      static_extra_cflags: '-DCURL_STATICLIB -DLIBSSH_STATIC -DLIBSLIRP_STATIC -DCAIRO_WIN32_STATIC_BUILD'
      clang_extra_cflags: '-Wno-missing-prototypes -Wno-sometimes-uninitialized -Wno-pragma-pack'

    name: ${{ format('ðŸš§ {0} Build {1}', matrix.sys, matrix.mode) }}
    defaults:
      run:
        shell: msys2 {0}
    steps:

    - name: 'ðŸ§° Checkout'
      uses: actions/checkout@main

    - name: '${{ matrix.icon }} Setup MSYS2'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          git
          make
          bison
          diffutils
          flex
          base-devel
          python
          python-setuptools
        pacboy: >-
          toolchain:p
          binutils:p
          capstone:p
          ccache:p
          curl:p
          cyrus-sasl:p
          dtc:p
          gcc:p
          glib2:p
          gnutls:p
          gtk3:p
          libgcrypt:p
          libjpeg-turbo:p
          libnfs:p
          libpng:p
          libssh:p
          libtasn1:p
          libusb:p
          lzo2:p
          nettle:p
          ninja:p
          pixman:p
          pkgconf:p
          python:p
          SDL2:p
          SDL2_image:p
          snappy:p
          spice:p
          usbredir:p
          zstd:p
          libslirp:p
          nsis:${{ endsWith(matrix.os, 'arm') && 'c' || 'p' }}

    - name: 'Modify pkgconfig to avoid linker issues'
      if: ${{ matrix.mode == 'static' }}
      run: |
          PKGCONFIG_FILE="/${{ matrix.sys }}/lib/pkgconfig/gpg-error.pc"
          sed -i "s#/${{ matrix.sys }}/lib/libintl.dll.a#-llibintl#g" "$PKGCONFIG_FILE"
          sed -i "s#/${{ matrix.sys }}/lib/libiconv.dll.a#-llibiconv#g" "$PKGCONFIG_FILE"

    - name: ${{ format ('ðŸš§ Build QEMU (arm & aarch64) {0}', matrix.mode) }}
      env:
        mode_flags: ${{ matrix.mode == 'dynamic' && env.dynamic_flags || env.static_flags }}
        extra_cflags: ${{ (matrix.mode == 'static' || startsWith(matrix.sys, 'clang')) && format('--extra-cflags="{0} {1}"', matrix.mode == 'static' && env.static_extra_cflags || '', startsWith(matrix.sys, 'clang') && env.clang_extra_cflags || '') || '' }}
      run: |
          ./configure --enable-sdl --enable-fdt=system --disable-docs --target-list=arm-softmmu,aarch64-softmmu --prefix="$(cygpath -u '${{ github.workspace }}')/artifacts" ${{ format('{0} {1}', env.mode_flags, env.extra_cflags) }}
          make -j16
          echo "version=v$(cat VERSION)-$(git rev-parse --short HEAD)" > $GITHUB_ENV

    - name: 'Workaround for clangarm64 nsis'
      if: ${{ endsWith(matrix.os, 'arm') && matrix.mode == 'dynamic' }}
      run: |
          ln -d -s /clang64/share/nsis /clangarm64/share/nsis
          ln /clang64/etc/nsisconf.nsh /clangarm64/etc/nsisconf.nsh
          ln /clang64/bin/makensis.exe /clangarm64/bin/makensis.exe

    - name: 'Prepare Artifacts (static)'
      if: ${{ matrix.mode == 'static' }}
      run: |
          make install

    - name: 'Prepare Artifacts (dynamic)'
      if: ${{ matrix.mode == 'dynamic' }}
      run: |
          make installer
          mv -v build/qemu-setup*.exe qemu-setup-${version}.exe;

    - name: 'Upload artifact (dynamic)'
      if: ${{ matrix.mode == 'dynamic' }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ format('QEMU {0} ({1} {2} build)', env.version, matrix.sys, matrix.mode) }}
        path: ${{ github.workspace }}\qemu-setup-${{ env.version }}.exe
        compression-level: 9

    - name: 'Upload artifact (static)'
      if: ${{ matrix.mode == 'static' }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ format('QEMU {0} ({1} {2} build)', env.version, matrix.sys, matrix.mode) }}
        path: ${{ github.workspace }}\artifacts
        compression-level: 9

    - name: 'Upload logs'
      if: ${{ failure() }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ format('QEMU {0} ({1} {2} build) logs', env.version, matrix.sys, matrix.mode) }}
        path: ${{ github.workspace }}/build
        compression-level: 9

  build_linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
        sysver: [24.04, devel]
    runs-on: ${{ matrix.os }}

    name: Build Linux (Ubuntu ${{ matrix.sysver }} ${{ endsWith(matrix.os, 'arm') && 'arm64' || 'x64' }})

    steps:

    - name: 'ðŸ§° Checkout'
      uses: actions/checkout@main

    - name: 'Update system to devel'
      if: ${{ matrix.sysver == 'devel' }}
      run: |
        sudo sed -i 's/noble/devel/g' /etc/apt/sources.list.d/ubuntu.sources
        sudo apt update
        sudo apt-mark hold cloud-init-base
        if [ ${{ endsWith(matrix.os, 'arm') }} == true ];
        then
          sudo apt-mark hold grub-efi-arm64-signed
        fi
        sudo apt full-upgrade

    - name: 'Install software packages'
      run: |
          sudo apt update
          sudo apt-get install ninja-build valgrind libglib2.0-dev libfdt-dev libpixman-1-dev libaio-dev libbluetooth-dev libcapstone-dev libbrlapi-dev libbz2-dev libcap-ng-dev libcurl4-gnutls-dev libgtk-3-dev libibverbs-dev libjpeg8-dev libnuma-dev librbd-dev librdmacm-dev libsasl2-dev libsdl2-dev libseccomp-dev libsnappy-dev libssh-dev libvde-dev libvdeplug-dev libvte-2.91-dev libxen-dev liblzo2-dev xfslibs-dev libnfs-dev libiscsi-dev xfsprogs

    - name: ðŸš§ Build QEMU Linux (arm & aarch64) (Ubuntu ${{ matrix.sysver }} ${{ endsWith(matrix.os, 'arm') && 'arm64' || 'x64' }})
      env:
        build_flags: ${{ endsWith(matrix.os, 'arm') && '--enable-kvm' || '' }}
      run: |
          ./configure --disable-docs --enable-gtk --enable-sdl --target-list=arm-softmmu,aarch64-softmmu --prefix='${{ github.workspace }}/artifacts' ${{ env.build_flags }}
          make -j16
          echo "version=v$(cat VERSION)-$(git rev-parse --short HEAD)" > $GITHUB_ENV

    - name: 'Prepare Artifacts'
      run: |
          make install

    - name: 'Upload artifact'
      uses: actions/upload-artifact@main
      with:
        name: ${{ format('QEMU {0} Linux (Ubuntu {1} {2} build)', env.version, matrix.sysver, endsWith(matrix.os, 'arm') && 'arm64' || 'x64') }}
        path: ${{ github.workspace }}/artifacts
        compression-level: 9

    - name: 'Upload logs'
      if: ${{ failure() }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ format('QEMU {0} Linux (Ubuntu {1} {2} build)', env.version, matrix.sysver, endsWith(matrix.os, 'arm') && 'arm64' || 'x64') }}
        path: ${{ github.workspace }}/build
        compression-level: 9